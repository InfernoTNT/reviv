* Ciljevi

** 

pre faksa new features:
  - basic physics (collision detection, response)
  - cascaded shadow maps, multipass shadow maps
  - bloom
  - antialiasing
  - layers
  -----------
  game i paralelno sa game:
   - scripting (videcu sta mi treba ako pravim igru u isto vreme)
   - events
   - partice system za krv (krv koja izlece kad pogodis neprijatelje) (cherno ima video-e valjda)
  --------

pre faksa fix:
 - crash
 - virtual machine compile windows 10
 - gjk, epa optimization, works correct
 - most TODO comments
 - remove a LOT useless comments

mozda jednoga dana:
 - broad phase collision detection (e.g. spatial hashing, k-d tree or oct tree....)
 - animation. physics based animation (growth game gdc talk)
 - blending
 - multithreading
 - maybe: some basic fluid simulation thing, some basic cloth simulation thing
 - voxel world optimization stuff
 - sound (openAL, miniaudio(hazel uses it, probably more minimal))
 - multiplayer (thinmatrix?)
 - ssao

ideja:
 renderSceneToFramebuffer(Framebuffer* pFramebuffer, bool isShadowsOn)
moze se koristiti za ogledala, portale itd... i za renderovanje obicne scene. (zahteva funkciju shadowsRenderPass ili tako nesto)

Debug za sutra:
 - Cini mi se da tekstura /uopste/ nije kreirana kako treba (clip-ovanje je lose) pogledati to. shadowMap.init() ?

todo:
 - default stuff for camera, lights, and materials("u_Diffuse", "u_Specular"). Default material
 - weather "system"
 - generalizuj shadow maps za vise svetala, i za point light
 - directional light u blin phong
 - fix lighting (marko kaze da misli da ne vidi specular)
 - clear comments, TODO, and useless code

don't forget:
 - good normal vectors for shaders after scaling
 - apstract factory
 - basic scripting
 - better include-s
 - singleton use get() everywhere and /not/ getInstance()
 - rename pointers
 - comments, TODO comments
 - rename member variables to some convention

** 

novi ciljevi:
 - proper lighting, proper normal transforms (learnopengl.com ima resurs)http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/
 - hdr, bloom
 - shadowmaps
 
order: input->update->display

clean project:
 - git "merge" with main, reviv1

long term:
    - full scripting system
    - imgui, imguizmo.... full cherno style thing
    - layers

organizacija:
 - m_thing, m_Thing, pThing
 - iteratori kako valja
 - const * gde treba
 - red include-ova (ima na stack overflow)
 - operatori za mat.h
      
* Physics

** (blank) 

danas:
 - dodaj assert za prosli direction i newpoint u handleTriangle
 - casey muratori check
 - gjk distance and vector
 - some other 3d implementation
   

general plan:
 1. double dispatch
 2. collision detection: sat/gjk
 3. collision response
 4. merge
 -------
 - broadphase:
     -kD tree
     -space hash (https://www.gamedev.net/tutorials/_/technical/game-programming/spatial-hashing-r2697/)
 - copy raycasting from old physics?
 - player motion with raycasting (works on uneven surfaces)
 - entity sliding na povrsinama radi tek kasnije

** gjk

initialDirection = normalize(s2.center - s1.center);
 
Note also that if the GJK algorithm is applied to the vertex sets of nonconvex polyhedra, it will compute the smallest distance between the convex hulls of these nonconvex polyhedra.

** ray casting

Ray casts are used by weapon systems (e.g., to determine bullet hits), player mechanics (e.g., to determine whether or not there is solid ground beneath the character’s feet), AI systems (e.g., line of sight checks, targeting, movement queries, etc.), vehicle systems (e.g., to locate and snap the vehicle’s tires to the terrain) and so on.

probably should report only the nearest "hit".


$p(t) = p_0 + td, \quad t \in [0, 1]$
Game engine book:
    #+begin_src cpp
      struct RayCastContact
      {
          float t; // value of t for constact

          Entity* pEntity; // which entity did we hit

          Vec3f normal; // surface normal at contact

        // other info
      };

    #+end_src

** shape cast

PROBABLY USED FOR CHARACTER MOTION. WORKS ON UNEVEN PLANE. LOOK AT GAME ENGINE BOOK
Similar to ray cast.

Game engine book:
    "The contact information returned by a shape cast is necessarily a bit more complex than it is for a ray cast. We cannot simply return one or more t values, because a t value only describes the location of the center point of the shape along its path. It tells us nothing of where, on the surface or interior of the shape, it came into contact with the impacted collidable. As a result, most shape casting APIs return both a t value and the actual contact point, along with other relevant information (such as which collidable was struck, the surface normal at the contact point, etc.)."

** (blank)

collider/rigidbody3d thing:
 - capsule (optional)
 - box
 - sphere
 - mesh

#+begin_src cpp
    inline ColissionPoints testColission(Collider* pColider1, Collider* pCollider2)
    {
      return iTestColission(pCollider1, pCollider2);
    } // neefikasno ovako return-ovati


    ColissionPoints iTestColission(ColliderSphere* pColliderSphere1, ColliderSphere* pColliderSphere2);
    ColissionPoints iTestColission(ColliderSphere* pColliderSphere, ColliderBox* pColliderBox);
    ColissionPoints iTestColission(ColliderSphere* pColliderSphere, ColliderMesh* pColliderMesh);

    ColissionPoints iTestColission(ColliderBox* pColliderBox, ColliderBox* pColliderBox);
    ColissionPoints iTestColission(ColliderBox* pColliderBox, ColliderMesh* pColliderMesh);

    ColissionPoints iTestColission(ColliderMesh* pColliderMesh1, ColliderMesh* pColliderMesh2);

  class Object/Rigidbody3D/?? //nemoj "Object" pls
  {
    float mass;
    Vector3f velocity;
    Vector3f force;

    Collider* pCollider;
    Transform* pTransform;
  }

#+end_src

Mozda: odvojene funkcije detectColissions() i resolveColissions(). detectCollisions push_back-uje =Collision=-e u vektor collision-a. i onda ih resolveCollision resolv-uje.

** Nikola o Unreal Engine-u:
 Tipovi objekata za koliziju:
    Staticni: 
        arhitektura, zgrade itd...
        svaki predmet u svetu ima enum: da li prolazi kroz njih ili ne (3. je overlap, ne sudari ali da "notifikaciju" da su se sudarili) (te sve 3 stvari se zovu "Collision Resposne")
    Dinamicki
        npr: vrata
        igrac ne moze ici kroz njih, a oni se pomeraju. imaju svoju koliziju. menjaju svoj transform. tvrdi. SVI ISPOD OVOG SU DINAMICKI U SUSTINI ALI MALO DRUGACIJE
        krecu se po user defined animacijama itd... (not physics newton)
    Pawn (character kontorler samo, (ili player controller), samo jebeno pada i pomera se kada pritisnes WASD. Baguje kada =Pawn= stane na njega (onako trese se i nekad odletis, klasika) source engine ovo bolje radi.
    Physics body (sve na sta njutnovi zakoni rade) (ragdolovi i stvari koji simuliraju fiziku generalno)
    Vehicle (nije nikada koristio)
    Destrutable (sacinjeni od vise komada, i raspadnu se. svaki deo ima svoju koliziju)

za bilijarske kugle bi koristio physics body da moze da korsiti sam svoju fiziku

** Game engine architecture book

Collision primitives:
 - sphere (radius + position = 4 floats -> SIMD fast af)
 - capsule . 2 points + radius. more efficient than spheres and boxes
 - aabb. represented by 2 points, one with smaller x and y, and the other with larger x and y. fast with other aabb collision detection
 - orented bounding box (a.k.a. box). represented by three half dimensions and transformation

*** Contact information

Collision systems usually package contact information into a convenient data structure that can be instanced for each contact detected. For example, Havok returns contacts as instances of the class hkContactPoint. Contact information often includes a separating vector—a vector along which we can slide the objects in order to efficiently move them out of collision. It also typically contains information about which two collidables were in contact, including which individual shapes were intersecting and possibly even which individual features of those shapes were in contact. The system may also return additional information, such as the velocity of the bodies projected onto the separating normal.

** SAT

Such a line is called a separating line, and it is always perpendicular to
the separating axis

 *good optimization* - We can also think of a projection as a minimum and
maximum coordinate along the axis, which we can write as the fully closed
interval [cmin, cmax]

*** Wikipedia:

In 3D, using face normals alone will fail to separate some edge-on-edge non-colliding cases. Additional axes, consisting of the cross-products of pairs of edges, one taken from each object, are required.[6]

For increased efficiency, parallel axes may be calculated as a single axis.

* Renderer

** hdr & bloom

https://www.youtube.com/watch?v=tI70-HIc5ro&t=1256s

unity tone mapping:
 ACES (popular, used in film industry)

** 

submit:
 entity.meterial.bind();
 bindEnvironment(entity.shader);
 entity.vao.bind();
 drawElements();

Material sadrzi samo:
    - Shader
    - Shader data -> uniforms + textures
    - Flags:
        - two-sided
        - depth test
        - blending
        - etc...

- setEnvironment("uEnvironment_lightKurcina", light.kurcina);

- entity.material.setTexture("u_NormalMap", entity123.normalmap);

#+begin_src cpp
  void bindEnvironment(Shader shader)
  {
    shader.bind(); // proveriti da li je vec bound-ovan?
    for(auto it : environmentMap) // sad je pitanje: gde staviti ovaj environment map. Scene? (nemoj EnvironmentManager, ili bar nemoj u odvojen fajl stavljati)
      // environment map treba da bude isti kao onaj map za materiale. taj novi tip mogu nazvati: uniformMap
      {
        for(auto iterator : shader.uniformNameMap)
          {
            if(iterator.first == it.first)
              {
                environmentSet(it.second, it.second);
              }
          }
      }
  }
#+end_src

#+begin_src cpp
  void Material::setTexture(string name, Texture* pTexture)
  {
      textureMap[name] = pTexture;
  }

  void Material::bind()
  {
    // other stuff

    int counter = 0;
    for(auto it : textureMap)
      {
        counter++;
        it->bind(counter);
        this->pShader->uploadUniform1i(counter);
      }
  }
#+end_src

* Window, event, input

=Application= creates =window=, =window= does not know about =application=.

Window gives events to application:
 1. window gets event callback
 2. turn it into event and propagate to application

Application creates window

Event class contains info about the event. Ex. MouesBUttonPressEvent

Window has function pointer to the callback function in application 

Callback function : onEvent(const Event& event)

* beleske
** Static
- static local variable:
   lifetime -> entire program
   scope -> limited to that scope

stvari koje cine static cini mi se:
 - inicijalizacija se radi samo jednom
 - program life time
 - local to that scope

** const

Zavsisi sa koje /strane/ =*= je =const=.

- =int const* A= $\equiv$ =const int* A=   -> ne mozes menjati A, mozes menjati gde pokazuje pointer

- =int * const a=                    -> mozes menjati A, ne mozes menjati gde pokazuje pointer

- =const= na kraju imena =metode= garantuje da metoda nece menjati clanove klase.
#+begin_src cpp
  class A{

    int b;
    int radi() const
    {
      cout << b;
    }

  };
#+end_src

** shader
- Finding uniform location does note require you to use the shader program first.

- Updating a uniform *does* require you to /first/ use the program. (da li moze update posle prvog koriscenja iako nije trentuno in-use???)
** pointers
Cherno kaze: On /licno/ koristi ili =shared pointer= ili =raw pointer=. U praksi ne koristi =unique pointer= jer se oni koriste kada je bitna performansa, a tada /might as well use raw/.
https://www.youtube.com/watch?v=HkGZ378nArE
https://www.youtube.com/watch?v=sLlGEUO_EGE
Comment your .h files
** resursi (knjige, artikli itd)

Three optimizatoin tips for c++ (preporuka od game engine book): https://www.slideshare.net/andreialexandrescu1/
- game dev -> left handed coordinate system

gang of four - design patterns of OOP (game engine book prepourka)
** order of class members

moje licno:
    1. public
    2. private

    1. typedefs adn enums
    2. constants
    3. constructor
    4. destructor
    5. static methods
    6. methods
    7. static data member
    8. data member

* Ecs stuff
** entt api

- entt::entity entity = m_Registry.create(); //m_Registry $\approx$ scene, entt::entity = uint32_t

- m_Registry.emplace<TransformComponent>(entity); (RADI RETURN)
- m_Registry.emplace<TransformComponent>(entity, construstor_arguments); //https://www.youtube.com/watch?v=D4hz0wEB978&t=1304s @22:00

napravi =entity.add<TransformComponent>(constructor_args);= ili =EntityManager::add<TransformComponent>(entity, constructor_args)= (drugi je mozda komplikovan)

- m_Registry.remove<TransformComponent>(entity)

- m_Registry.clear()

- m_Registry.get<TransformComponent>(entity)

- if(m_Registry.has<TransformComponent>(entity))

TransformComponent& transform = m_Registry.emplace<TransformComponent>(entity, constructor_args); // *brutalno*
auto& transform = m_Registry.emplace<TransformComponent>(entity, constructor_args); // *brutalno*

Radi funkciju /onTransformConstruct/ na svakoj konstrukciji transforma.
    m_Registry.on_construct<TransformComponent>().connect<&onTransformConstruct>();
    m_Registry.on_destruct...
    m_Registry.on_destroy...
    m_Registry.on_update...
    m_Registry.on_replace...
            static void onTransformConstruct(entt:registry& registry, entt:entity entity);
   

*** Prolazenje/iteracija:

auto view = m_Registry.view<TransformComponent>();
for (auto entity: view)
{
    auto& TransformComponent = m_Registry.get<TransformComponent>(entity);
}

*iteracija kroz grupe*:
auto group = m_Registry.group<TransformComponent>(entt:get<MeshComponent>);
for (auto entity : group)
{
    auto&[transform, mesh] = group.get<TransformComponent, MeshComponent>(entity); // *C++ 17*
}

** cherno api

bool entity.hasComponent<TransformComponent>();

auto& squareColor = m_SquareEntity.GetComponent<SpriteRendererComponent>().Color; *RETURN TYPE Je T**

** 
za basic ecs (malkice bolja verzija mozda ovog mog, ili bar malo vise citka mozda): https://stackoverflow.com/questions/17058701/member-function-called-only-on-initialization-of-first-instance-of-a-class-c

https://github.com/SanderMertens/ecs-faq

*nemoj ga praviti*

- Najvrv da svaki =entity= moze da ima po jedan od svakog =component=, tako i profesionalni ecs radi.

- Svaki entity ima svoj ID.

- U listi komponenti, svaka komponenta ima svoj ID. Onda ces moci dobiti sve ostale informacije vezane za taj entity ID.

- U listi komponenti, svaka komponenta ima svoj =bool= koji oznacava da li da je sistem /ignorise/ (tojest da li je "obrisana") ili da je sistem koristi (renderuje/physics-uje itd...)

Proveravanje da li ima bilo koji broj komponenti u O(1):
    - Da bi proverio da li neki entity ima recimo: transform i mesh, radim preko *bit-flagova* i bit operaciaj, kazem entity.has(TRANSFORM_COMPONENT_FLAG & MESH_COMPONENT_FLAG)
Uzimanje pointer od komponente u O(1):
    - Samo /store-uj/ pointere ka svim komponentama.
-----

kompnente:

template T -> id komponente tipa T (idk) -> return pointer tipa T

* Refactor cummulation ideas

Staviti mnoge member funckcije da su =const= i da return-uju =const *=

thing -> m_Thing (ili mThing ili m_thing??) (vrv m_Thing)

transform -> cherno like transform

* Optimizacija

inline a lot of shit

Cach-iranje pozicija uniform-ova u shader-u pri kompajlovanju

Koristiti std::array umesto std::vector, zbog heap allocation shita - kaze Cherno. Ili napraviti svoju implementaciju vektora ili array-a

Za voxel based:
 - frustum culling
 - occlusion culling
 - rendering only visible faces
 - several articles and videos about it, heck there is even an stb library
 - ?sean's toolbox?

Batched rendering.

Instanced rendering.

SIMD operations.

Provertiti da li se mozda zovu neki construktori i desktruktori koji ne bi trebali (ne bi trebali skoro nijedan).

???? culling? Ne znam koja reci ide umesto "????".

staiviti inline na mesta gde funkcija samo return-uje.

U iteraciji =for(auto itEntity = iGetEntityList()->begin(); itEntity != iGetEntityList()->end(); itEntity++)=, iGetEntityList() je neefikasno da se ponavlja svaku iteraciju.

Proper deffered rendering for lighting. (gives light ranges that they don't act outside of)

* Long term ideje

camera.renderTarget(Entity)  ->  track-uje neki entity

class SpecificComponent : public Component
 static getName()
 static std::string name;

Svaki Component da ima svoj (ne virtualan) id.

In order to render a skeletal mesh, the game engine requires three distinct kinds of data:
1. the mesh itself,
2. the skeletal hierarchy (joint names, parent-child relationships and the
base pose the skeleton was in when it was originally bound to the mesh),
and
58 1. Introduction
3. one or more animation clips, which specify how the joints should move
over time.

* Resursi
https://antongerdelan.net/opengl/
https://open.gl/
